* Lectures
** <2017-07-26 Wed> 
*** Handling Command Line Arguments
Use =sscanf= to handle command line arguments and error checking. Here is a
example calendar app that gets months. We first check that we receive the
correct number of command line arguments. We then check that the command line
arguments are valid by assigning it to an integer and checking the return status
of that assignment.
#+BEGIN_SRC C
  #include <stdio.h>
  #include <stdlib.h>

  int main(int argc, char *argv[])
  {
      char * monthStr;
      if(argc != 2){
          fprintf(stderr, "Usage: month 1...12 \n");
          return EXIT_FAILURE;
      }
      int count;
      int num;
      //assignment and error checking is handled in the one line
      if((count = sscanf(argv[1], "%d", &num)) == 0){
          fprintf(stderr, "Usage: month 1...12 \n");
          return EXIT_FAILURE;
      }

      switch(num){
          case 1: monthStr = "January"; break;
          case 2: monthStr = "February"; break;
          default: monthStr = "Other"; break;
      }

      printf("%s\n", monthStr);

      return EXIT_SUCCESS;
  }
#+END_SRC
** <2017-08-01 Tue> [[file:lectures/week2.html][Lecture Slides]] 
*** Measuring the efficiency of an algorithm
We want our programs to be /correct/, /reliable/, /maintainable/ and
/efficient/. To determine algorithmic efficiency, we measure program execution
costs.
| Experimental                                     | Theoretical                          |
|--------------------------------------------------+--------------------------------------|
| Run and measure execution time                   | Identify core costs of an algorithm  |
| Depends on compiler, machine etc.                | Express cost in terms of #operations |
| Alternatively we analyze a function call profile |                                      |

We are usually more interested in the /growth rate/ of algorithms rather than
their absolute cost. We look at /complexity classes/ and /big-O notation/:
- O(1) ... constant functions
- O(logn) ... log functions
- O(n) ... linear functions
- O(nlogn), O(n^2), O(n!) ... etc.
